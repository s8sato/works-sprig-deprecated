
==================== FINAL INTERFACE ====================
2020-01-04 04:11:30.6720261 UTC

interface main:Main 8065
  interface hash: fe0fcc4470d824c971f930588c8b665e
  ABI hash: 40ac240d4b963c77003f96eb1b522ac1
  export-list hash: 11ea1ec55ea693fec02ee61f2c8ad993
  orphan hash: db4f9241fb8c3e5ccde8f8aa065bd7e3
  flag hash: c568feb604a8b52c3c9fcddd74a772c5
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.allTests
  Main.footL
  Main.frg
  Main.frg1
  Main.frg2
  Main.frg3
  Main.frg4
  Main.grandDeadlineTest
  Main.hoge
  Main.main
  Main.pianoRollFTest
  Main.pianoRollFTest2
  Main.routeFindFTest
  Main.routeFromFootL
  Main.starMan
  Main.successorTest
  Main.totalWeightTest
  Main.urgencyByPathFTest
  Main.urgencyFTest
  Main.winner
  Main.winnerTest
module dependencies:
package dependencies: Only-0.1 QuickCheck-2.13.2 StateVar-1.2
                      Unique-0.4.7.6 Win32-2.6.1.0 adjunctions-4.4 aeson-1.4.6.0
                      aeson-compat-0.3.9 ansi-terminal-0.9.1 ansi-wl-pprint-0.6.9
                      appar-0.1.8 array-0.5.3.0 async-2.2.2 attoparsec-0.13.2.3
                      attoparsec-iso8601-1.0.1.0 auto-update-0.1.6 base-4.12.0.0
                      base-compat-0.10.5 base-orphans-0.8.1 base-unicode-symbols-0.2.3
                      base64-bytestring-1.0.0.2 basement-0.0.11 bifunctors-5.5.6
                      binary-0.8.6.0 blaze-builder-0.4.1.0 blaze-html-0.9.1.2
                      blaze-markup-0.8.2.3 bsb-http-chunked-0.0.0.4 byteorder-1.0.4
                      bytestring-0.10.8.2 call-stack-0.1.0 case-insensitive-1.2.0.11
                      clock-0.8 colour-2.3.5 comonad-5.0.6 conduit-1.3.1.1
                      conduit-extra-1.3.4 containers-0.6.0.1 contravariant-1.5.2
                      cookie-0.4.5 cryptonite-0.25 data-default-class-0.1.2.0 dec-0.0.3
                      deepseq-1.4.4.0 directory-1.3.3.0 distributive-0.6.1 dlist-0.8.0.7
                      double-conversion-2.0.2.0 easy-file-0.2.2 esqueleto-3.0.0
                      exceptions-0.10.3 extra-1.6.18 fast-logger-2.4.17 file-embed-0.0.11
                      filepath-1.4.2.1 free-5.1.3 ghc-boot-th-8.6.5 ghc-prim-0.5.3
                      hashable-1.2.7.0 http-api-data-0.4.1.1 http-date-0.0.8
                      http-media-0.8.0.0 http-types-0.12.3 http2-1.6.5
                      integer-gmp-1.0.2.0 integer-logarithms-1.0.3 iproute-1.7.8
                      kan-extensions-5.2 lens-4.17.1 lifted-base-0.2.3.12 memory-0.14.18
                      mime-types-0.1.0.9 mintty-0.1.2 mmorph-1.1.3 monad-control-1.0.2.3
                      monad-logger-0.3.31 monad-loops-0.4.3 mono-traversable-1.0.13.0
                      mtl-2.2.2 network-2.8.0.1 network-byte-order-0.1.2.0
                      network-uri-2.6.1.0 old-locale-1.0.0.7 old-time-1.1.0.3
                      optparse-applicative-0.14.3.0 parsec-3.1.14.0 path-pieces-0.2.1
                      persistent-2.9.2 persistent-postgresql-2.9.1
                      persistent-template-2.6.0 postgresql-libpq-0.9.4.2
                      postgresql-simple-0.6.2 pretty-1.1.3.6 primitive-0.6.4.0
                      process-1.6.5.0 profunctors-5.3 psqueues-0.2.7.2 random-1.1
                      reflection-2.1.5 resource-pool-0.2.3.2 resourcet-1.2.2
                      scientific-0.3.6.2 semigroupoids-5.3.4 servant-0.16.2
                      servant-foreign-0.15 servant-options-0.1.0.0 servant-server-0.16.2
                      server-0.1.0.0 silently-1.2.5.1 singleton-bool-0.1.5 split-0.2.3.3
                      splitmix-0.0.3 stm-2.5.0.0 stm-chans-3.0.0.4
                      streaming-commons-0.2.1.1 string-conversions-0.4.0.1 tagged-0.8.6
                      tasty-1.2.3 tasty-hunit-0.10.0.2 template-haskell-2.14.0.0
                      text-1.2.3.1 text-format-0.3.2 th-abstraction-0.3.1.0 time-1.8.0.2
                      time-compat-1.9.2.2 time-manager-0.0.0 transformers-0.5.6.2
                      transformers-base-0.4.5.2 transformers-compat-0.6.5
                      unbounded-delays-0.1.1.0 unix-compat-0.5.2 unix-time-0.4.7
                      unliftio-core-0.1.2.0 unordered-containers-0.2.10.0
                      utf8-string-1.0.1.1 uuid-types-1.0.3 vault-0.3.1.3 vector-0.12.0.3
                      vector-algorithms-0.8.0.3 wai-3.2.2.1 wai-app-static-3.1.6.3
                      wai-cors-0.2.7 warp-3.2.28 word8-0.1.3 zlib-0.6.2.1
orphans: colour-2.3.5:Data.Colour
         basement-0.0.11:Basement.UArray.Base basement-0.0.11:Basement.Block
         reflection-2.1.5:Data.Reflection network-2.8.0.1:Network.Socket
         persistent-template-2.6.0:Database.Persist.TH
         persistent-2.9.2:Database.Persist.Sql.Orphan.PersistQuery
         persistent-2.9.2:Database.Persist.Sql.Orphan.PersistUnique
         persistent-2.9.2:Database.Persist.Sql.Orphan.PersistStore
         unix-time-0.4.7:Data.UnixTime.Diff stm-2.5.0.0:Control.Monad.STM
         attoparsec-0.13.2.3:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.3:Data.Attoparsec.ByteString.Char8
         time-1.8.0.2:Data.Time.Clock.TAI
         vector-0.12.0.3:Data.Vector.Unboxed
         hashable-1.2.7.0:Data.Hashable.Generic
         vector-0.12.0.3:Data.Vector.Fusion.Bundle
         transformers-0.5.6.2:Control.Monad.Trans.Error
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         text-1.2.3.1:Data.Text.Lazy text-1.2.3.1:Data.Text
         binary-0.8.6.0:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.1:Data.Text.Show base-4.12.0.0:GHC.Float
         base-4.12.0.0:GHC.Base
family instance modules: Only-0.1:Data.Tuple.Only
                         adjunctions-4.4:Data.Functor.Rep
                         aeson-1.4.6.0:Data.Aeson.Types.Internal
                         attoparsec-0.13.2.3:Data.Attoparsec.Internal.Types
                         base-4.12.0.0:Control.Applicative base-4.12.0.0:Data.Complex
                         base-4.12.0.0:Data.Functor.Compose base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity
                         base-4.12.0.0:Data.Functor.Product base-4.12.0.0:Data.Functor.Sum
                         base-4.12.0.0:Data.Monoid base-4.12.0.0:Data.Semigroup
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:Data.Version
                         base-4.12.0.0:Data.Void base-4.12.0.0:GHC.Exts
                         base-4.12.0.0:GHC.Generics base-4.12.0.0:GHC.IO.Exception
                         basement-0.0.11:Basement.Block.Base
                         basement-0.0.11:Basement.Bounded basement-0.0.11:Basement.Monad
                         basement-0.0.11:Basement.MutableBuilder
                         basement-0.0.11:Basement.Nat basement-0.0.11:Basement.NonEmpty
                         basement-0.0.11:Basement.Numerical.Subtractive
                         basement-0.0.11:Basement.PrimType basement-0.0.11:Basement.String
                         basement-0.0.11:Basement.String.Encoding.ASCII7
                         basement-0.0.11:Basement.String.Encoding.ISO_8859_1
                         basement-0.0.11:Basement.String.Encoding.UTF16
                         basement-0.0.11:Basement.String.Encoding.UTF32
                         basement-0.0.11:Basement.Types.OffsetSize
                         basement-0.0.11:Basement.UArray.Base
                         basement-0.0.11:Basement.UTF8.Base
                         bifunctors-5.5.6:Data.Bifunctor.Biff
                         bifunctors-5.5.6:Data.Bifunctor.Clown
                         bifunctors-5.5.6:Data.Bifunctor.Fix
                         bifunctors-5.5.6:Data.Bifunctor.Flip
                         bifunctors-5.5.6:Data.Bifunctor.Join
                         bifunctors-5.5.6:Data.Bifunctor.Joker
                         bifunctors-5.5.6:Data.Bifunctor.Product
                         bifunctors-5.5.6:Data.Bifunctor.Sum
                         bifunctors-5.5.6:Data.Bifunctor.Tannen
                         bifunctors-5.5.6:Data.Bifunctor.Wrapped clock-0.8:System.Clock
                         conduit-1.3.1.1:Data.Conduit.Internal.Conduit
                         conduit-1.3.1.1:Data.Conduit.Internal.Pipe
                         containers-0.6.0.1:Data.Graph
                         containers-0.6.0.1:Data.IntMap.Internal
                         containers-0.6.0.1:Data.IntSet.Internal
                         containers-0.6.0.1:Data.Map.Internal
                         containers-0.6.0.1:Data.Sequence.Internal
                         containers-0.6.0.1:Data.Set.Internal containers-0.6.0.1:Data.Tree
                         cryptonite-0.25:Crypto.Hash.Blake2
                         cryptonite-0.25:Crypto.Hash.Blake2b
                         cryptonite-0.25:Crypto.Hash.Blake2bp
                         cryptonite-0.25:Crypto.Hash.Blake2s
                         cryptonite-0.25:Crypto.Hash.Blake2sp
                         cryptonite-0.25:Crypto.Hash.Keccak cryptonite-0.25:Crypto.Hash.MD2
                         cryptonite-0.25:Crypto.Hash.MD4 cryptonite-0.25:Crypto.Hash.MD5
                         cryptonite-0.25:Crypto.Hash.RIPEMD160
                         cryptonite-0.25:Crypto.Hash.SHA1 cryptonite-0.25:Crypto.Hash.SHA224
                         cryptonite-0.25:Crypto.Hash.SHA256 cryptonite-0.25:Crypto.Hash.SHA3
                         cryptonite-0.25:Crypto.Hash.SHA384
                         cryptonite-0.25:Crypto.Hash.SHA512
                         cryptonite-0.25:Crypto.Hash.SHA512t
                         cryptonite-0.25:Crypto.Hash.SHAKE
                         cryptonite-0.25:Crypto.Hash.Skein256
                         cryptonite-0.25:Crypto.Hash.Skein512
                         cryptonite-0.25:Crypto.Hash.Tiger
                         cryptonite-0.25:Crypto.Hash.Whirlpool dlist-0.8.0.7:Data.DList
                         free-5.1.3:Control.Comonad.Cofree
                         free-5.1.3:Control.Comonad.Trans.Cofree
                         free-5.1.3:Control.Monad.Free free-5.1.3:Control.Monad.Trans.Free
                         ghc-boot-th-8.6.5:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.6.5:GHC.LanguageExtensions.Type
                         http-api-data-0.4.1.1:Web.Internal.FormUrlEncoded
                         iproute-1.7.8:Data.IP.Addr iproute-1.7.8:Data.IP.Range
                         kan-extensions-5.2:Data.Functor.Day
                         kan-extensions-5.2:Data.Functor.Yoneda lens-4.17.1:Control.Lens.At
                         lens-4.17.1:Control.Lens.Internal.Indexed
                         lens-4.17.1:Control.Lens.Reified lens-4.17.1:Control.Lens.Tuple
                         lens-4.17.1:Control.Lens.Wrapped lens-4.17.1:Control.Lens.Zoom
                         monad-control-1.0.2.3:Control.Monad.Trans.Control
                         monad-logger-0.3.31:Control.Monad.Logger
                         mono-traversable-1.0.13.0:Data.MonoTraversable
                         mono-traversable-1.0.13.0:Data.NonNull
                         mono-traversable-1.0.13.0:Data.Sequences
                         network-uri-2.6.1.0:Network.URI
                         persistent-2.9.2:Database.Persist.Class.PersistConfig
                         persistent-2.9.2:Database.Persist.Class.PersistEntity
                         persistent-2.9.2:Database.Persist.Sql.Orphan.PersistStore
                         persistent-2.9.2:Database.Persist.Sql.Types.Internal
                         persistent-postgresql-2.9.1:Database.Persist.Postgresql
                         postgresql-simple-0.6.2:Database.PostgreSQL.Simple.Internal
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.4.0:Control.Monad.Primitive
                         primitive-0.6.4.0:Data.Primitive.Array
                         primitive-0.6.4.0:Data.Primitive.ByteArray
                         primitive-0.6.4.0:Data.Primitive.PrimArray
                         primitive-0.6.4.0:Data.Primitive.SmallArray
                         primitive-0.6.4.0:Data.Primitive.UnliftedArray
                         profunctors-5.3:Data.Profunctor.Composition
                         profunctors-5.3:Data.Profunctor.Rep
                         resourcet-1.2.2:Control.Monad.Trans.Resource.Internal
                         servant-0.16.2:Servant.API.ContentTypes
                         servant-0.16.2:Servant.API.Generic
                         servant-0.16.2:Servant.API.IsSecure
                         servant-0.16.2:Servant.API.Stream servant-0.16.2:Servant.API.Verbs
                         servant-0.16.2:Servant.Links
                         servant-foreign-0.15:Servant.Foreign.Internal
                         servant-server-0.16.2:Servant.Server.Internal
                         servant-server-0.16.2:Servant.Server.Internal.BasicAuth
                         servant-server-0.16.2:Servant.Server.Internal.DelayedIO
                         servant-server-0.16.2:Servant.Server.Internal.Handler
                         servant-server-0.16.2:Servant.Server.Internal.RouteResult
                         server-0.1.0.0:Entity tagged-0.8.6:Data.Tagged
                         tasty-1.2.3:Test.Tasty.Core
                         template-haskell-2.14.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.1:Data.Text text-1.2.3.1:Data.Text.Lazy
                         th-abstraction-0.3.1.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.10.0:Data.HashMap.Base
                         unordered-containers-0.2.10.0:Data.HashSet.Base
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.3:Data.Vector vector-0.12.0.3:Data.Vector.Primitive
                         vector-0.12.0.3:Data.Vector.Storable
                         vector-0.12.0.3:Data.Vector.Unboxed
                         vector-0.12.0.3:Data.Vector.Unboxed.Base
                         zlib-0.6.2.1:Codec.Compression.Zlib.Stream
import  -/  base-4.12.0.0:Data.Foldable bdeac546b12282c8986759606b9295a5
import  -/  base-4.12.0.0:Data.List 6c60559263db7cf0f22549b9673785b9
import  -/  base-4.12.0.0:GHC.Base fbe365a916ebeeeb4bc1f895dbe83e42
import  -/  base-4.12.0.0:GHC.Num 8203d3fee487126cffd5e55ba5d0e8c3
import  -/  base-4.12.0.0:Prelude 80c668cb99fbafebd524c5e897f8c982
import  -/  ghc-prim-0.5.3:GHC.Classes 6002495dc43e58d28c87e5e5e058752a
import  -/  ghc-prim-0.5.3:GHC.Types 57064c9f957b09bc2e360061ad5cae0b
import  -/  server-0.1.0.0:Controller dfdbe115f8e9ea4c8465f1f20c43b98a
import  -/  tasty-1.2.3:Test.Tasty bf80820d8bec087d25539f861ca68f57
import  -/  tasty-1.2.3:Test.Tasty.Core 1266829394a58ec8149df705224b10a5
import  -/  tasty-hunit-0.10.0.2:Test.Tasty.HUnit 1a4a6bc45abedf1962a2c9be0c12868e
import  -/  tasty-hunit-0.10.0.2:Test.Tasty.HUnit.Orig e211665d95de04a4ef0a2a4588f5848c
61109eeae19493f596b17937c8a87213
  $s$fEq(,) :: GHC.Classes.Eq (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Types.Int, GHC.Types.Int)
                  (GHC.Classes.$fEq(,)_$c==
                     @ GHC.Types.Int
                     @ GHC.Types.Int
                     GHC.Classes.$fEqInt
                     GHC.Classes.$fEqInt)
                  Main.$s$fEq(,)_$s$fEq(,)_$c/= -}
d9c29de69e24759049df94d820948480
  $s$fEq(,)_$s$fEq(,)_$c/= ::
    (GHC.Types.Int, GHC.Types.Int)
    -> (GHC.Types.Int, GHC.Types.Int) -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(1*U(U),1*U(U))><S(S(S)L),1*U(1*U(U),1*U(U))>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: (GHC.Types.Int, GHC.Types.Int))
                   (y :: (GHC.Types.Int, GHC.Types.Int)) ->
                 case x of wild { (,) a1 a2 ->
                 case y of wild1 { (,) b1 b2 ->
                 case GHC.Classes.eqInt a1 b1 of wild2 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True
                   -> case GHC.Classes.eqInt a2 b2 of wild3 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True -> GHC.Types.False } } } }) -}
4019e83a64a302abb025a5668a0e533a
  $s$fEq[] :: GHC.Classes.Eq [Controller.TaskFrag]
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ [Controller.TaskFrag]
                  (GHC.Classes.$fEq[]_$c==
                     @ Controller.TaskFrag
                     Controller.$fEqTaskFrag)
                  Main.$s$fEq[]_$s$fEq[]_$c/= -}
07f37350e4b8a9330698197cf3c9cf68
  $s$fEq[]1 ::
    GHC.Classes.Eq [(Controller.Millis, Controller.Millis)]
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ [(Controller.Millis, Controller.Millis)]
                  (GHC.Classes.$fEq[]_$c==
                     @ (Controller.Millis, Controller.Millis)
                     Main.$s$fEq(,))
                  Main.$s$fEq[]_$s$fEq[]_$c/=1 -}
ebb850c9a23a25f94873a03201d17cc2
  $s$fEq[]_$s$fEq[]_$c/= ::
    [Controller.TaskFrag] -> [Controller.TaskFrag] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: [Controller.TaskFrag]) (y :: [Controller.TaskFrag]) ->
                 case GHC.Classes.$fEq[]_$c==
                        @ Controller.TaskFrag
                        Controller.$fEqTaskFrag
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
ad37dcae467cd3944026feeadda5694f
  $s$fEq[]_$s$fEq[]_$c/=1 ::
    [(Controller.Millis, Controller.Millis)]
    -> [(Controller.Millis, Controller.Millis)] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: [(Controller.Millis, Controller.Millis)])
                   (y :: [(Controller.Millis, Controller.Millis)]) ->
                 case GHC.Classes.$fEq[]_$c==
                        @ (Controller.Millis, Controller.Millis)
                        Main.$s$fEq(,)
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
be86c9d078d3acbf19ba91fe74a24273
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
b09d86f2c49dd5176b544d8d13ddb6c5
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
23b03bd7d075a00f5ad1ee10e6add7b8
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
834549f124aecf4f02fe0d77ce0ff3be
  allTests :: Test.Tasty.Core.TestTree
  {- Strictness: m2,
     Unfolding: (Test.Tasty.Core.TestGroup
                   Main.allTests7
                   Main.allTests1) -}
350f6920d728f903e7a7f1be433bd3b6
  allTests1 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Main.allTests2
                   (GHC.Types.[] @ Test.Tasty.Core.TestTree)) -}
1750c228567c8fc6ccef44bab0401731
  allTests2 :: Test.Tasty.Core.TestTree
  {- Strictness: m2,
     Unfolding: (Test.Tasty.Core.TestGroup
                   Main.allTests5
                   Main.allTests3) -}
93e5c19bf0c723c15c256b1dc26a3251
  allTests3 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Main.hoge
                   Main.allTests4) -}
8b12b3ee01c4b12e995c3117056be514
  allTests4 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Main.successorTest
                   (GHC.Types.[] @ Test.Tasty.Core.TestTree)) -}
26bfea90be7ddd670040d38c2be7967e
  allTests5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.allTests6) -}
adb8524956c6e538be33255b4e7d7f20
  allTests6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("HUnit Tests"#) -}
c66679b3146abe92919b1940058a8620
  allTests7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.allTests8) -}
bdfb8795e79001c637cc47ef5a71de04
  allTests8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Tasty Tests"#) -}
a10260ca52bc3073093d76a23bf9105b
  footL :: Controller.TaskFrag
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Controller.TaskFrag
                   Main.footL3
                   (GHC.Maybe.Nothing @ Controller.Millis)
                   (GHC.Maybe.Nothing @ Controller.Millis)
                   Main.footL1) -}
c934d40a491be2beb783e450df637261
  footL1 :: GHC.Maybe.Maybe Controller.Millis
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Maybe.Just @ Controller.Millis Main.footL2) -}
5eeb435e8f91af33d8b76229a820d72b
  footL2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 60#) -}
9516c7760d1622dbf90b83f26c663d00
  footL3 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.footL5, Main.footL4)) -}
cc07aea1c5eb25d7b845f86dd917c79a
  footL4 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 8#) -}
a8e312dfaa49173b6c44e27a56bd959c
  footL5 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 4#) -}
8dc7eb41cf8c8b40ce3ca63bb1c0d0e1
  frg :: [Controller.TaskFrag]
  {- Strictness: m2,
     Unfolding: InlineRule (0, True, True) Main.frg4 -}
4979ffffda64e5b2f2b008ffabc3c936
  frg1 :: [Controller.TaskFrag]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Controller.TaskFrag
                   Main.frg33
                   Main.frg18) -}
b1c192d15fb76168d383123a7599fcc0
  frg10 :: GHC.Maybe.Maybe Controller.Millis
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Maybe.Just @ Controller.Millis Main.frg11) -}
37d13e459823119100745d802b5bb3c3
  frg11 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 200#) -}
b91d4f39ee7138fdfb19a9457153a752
  frg12 :: GHC.Maybe.Maybe Controller.Millis
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Maybe.Just @ Controller.Millis Main.frg13) -}
f0e6f3a50a175ebfbfabe64979e3b97f
  frg13 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 600#) -}
c1d284d60a2cb656498d359b249939dd
  frg14 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.starMan24, Main.starMan15)) -}
418e3b8fb81fcf89c0b60ef526ffc82c
  frg15 :: Controller.TaskFrag
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Controller.TaskFrag
                   Main.frg16
                   (GHC.Maybe.Nothing @ Controller.Millis)
                   Main.frg12
                   Main.frg10) -}
7e98754b98c87a60df180de43f8d0be9
  frg16 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.starMan20, Main.footL5)) -}
376f7c65c1905394b886b1433ad037f1
  frg17 :: Controller.TaskFrag
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Controller.TaskFrag
                   Main.starMan42
                   (GHC.Maybe.Nothing @ Controller.Millis)
                   Main.frg12
                   Main.frg10) -}
4b5ff0d9f8d4eceb8c6d45acdf54019a
  frg18 :: [Controller.TaskFrag]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Controller.TaskFrag
                   Main.frg30
                   Main.frg19) -}
9b61baeb4d8a4b9345644c34d8dda403
  frg19 :: [Controller.TaskFrag]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Controller.TaskFrag
                   Main.frg26
                   Main.frg20) -}
9ded6b817747f248b32d7a0031f8ac34
  frg2 :: [Controller.TaskFrag]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Controller.TaskFrag
                   Main.frg44
                   Main.frg36) -}
4f9dfa8ab76467308c3bdadf15a00d8d
  frg20 :: [Controller.TaskFrag]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Controller.TaskFrag
                   Main.frg21
                   (GHC.Types.[] @ Controller.TaskFrag)) -}
7eb9bb0da009e0dd2cd6d83a6a85a38c
  frg21 :: Controller.TaskFrag
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Controller.TaskFrag
                   Main.frg14
                   Main.frg24
                   Main.frg10
                   Main.frg22) -}
410a7633abc593d8afad630d705503af
  frg22 :: GHC.Maybe.Maybe Controller.Millis
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Maybe.Just @ Controller.Millis Main.frg23) -}
1e6e16907cc449bd787df012ca0842ea
  frg23 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 30#) -}
38baa4d7b542a6ae453a86ec1a95fbca
  frg24 :: GHC.Maybe.Maybe Controller.Millis
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Maybe.Just @ Controller.Millis Main.frg25) -}
1e5c0316070e879715f2ae68ffa2eadb
  frg25 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 100#) -}
4cfae3a0ca5d88752397e50c8b31b644
  frg26 :: Controller.TaskFrag
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Controller.TaskFrag
                   Main.frg29
                   Main.frg10
                   Main.frg27
                   Main.frg22) -}
34ce2bb9571341786867f3374d8ae94c
  frg27 :: GHC.Maybe.Maybe Controller.Millis
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Maybe.Just @ Controller.Millis Main.frg28) -}
31e1b29acbabddb6f7d9b675a70b703b
  frg28 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 300#) -}
bd1407ca4990de0924d73056c2e86a54
  frg29 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.footL5, Main.starMan24)) -}
04842475499befe8c93837dd123c2c78
  frg3 :: [Controller.TaskFrag]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Controller.TaskFrag
                   Main.frg17
                   Main.frg45) -}
44aac33de546266fcb397874576d7aa4
  frg30 :: Controller.TaskFrag
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Controller.TaskFrag
                   Main.frg16
                   Main.frg27
                   Main.frg31
                   Main.frg22) -}
cec95f18f5114d02ed11058255e5f3e9
  frg31 :: GHC.Maybe.Maybe Controller.Millis
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Maybe.Just @ Controller.Millis Main.frg32) -}
f9c0b1f370a6a3b563eb2b257079f78f
  frg32 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 400#) -}
2c41d9e86236c8f2fc0af39899fd6f78
  frg33 :: Controller.TaskFrag
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Controller.TaskFrag
                   Main.starMan38
                   Main.frg31
                   Main.frg34
                   Main.frg22) -}
2c0c9036bab379e98ecb286e5fe5ab05
  frg34 :: GHC.Maybe.Maybe Controller.Millis
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Maybe.Just @ Controller.Millis Main.frg35) -}
029c03bc8bedc24a16f107204984970c
  frg35 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 500#) -}
917405819ca5bc03d4a8352f1d0d3e0a
  frg36 :: [Controller.TaskFrag]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Controller.TaskFrag
                   Main.frg43
                   Main.frg37) -}
3b7c87928dd590936e5bd379aac3f085
  frg37 :: [Controller.TaskFrag]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Controller.TaskFrag
                   Main.frg42
                   Main.frg38) -}
f54956b140b7381245368fc38c0076f1
  frg38 :: [Controller.TaskFrag]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Controller.TaskFrag
                   Main.frg39
                   (GHC.Types.[] @ Controller.TaskFrag)) -}
7a7fd8dc23c7fb88a14deada6f210afc
  frg39 :: Controller.TaskFrag
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Controller.TaskFrag
                   Main.frg14
                   Main.frg24
                   (GHC.Maybe.Nothing @ Controller.Millis)
                   Main.frg40) -}
e2a2b79a5c53fca69b09b55c0762d34d
  frg4 :: [Controller.TaskFrag]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Controller.TaskFrag
                   Main.frg17
                   Main.frg7) -}
10cd7bd92d089bc44bb93e75cba9705c
  frg40 :: GHC.Maybe.Maybe Controller.Millis
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Maybe.Just @ Controller.Millis Main.frg41) -}
b83746e0d71765f70ef6a9ebdefc6977
  frg41 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 90#) -}
eb4e67eba85486bc1711fb68d91f9944
  frg42 :: Controller.TaskFrag
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Controller.TaskFrag
                   Main.frg29
                   (GHC.Maybe.Nothing @ Controller.Millis)
                   (GHC.Maybe.Nothing @ Controller.Millis)
                   Main.frg40) -}
1d710bc20d16b7ca5718d6d481d9395e
  frg43 :: Controller.TaskFrag
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Controller.TaskFrag
                   Main.frg16
                   (GHC.Maybe.Nothing @ Controller.Millis)
                   (GHC.Maybe.Nothing @ Controller.Millis)
                   Main.frg40) -}
6da250284537ef5ff629c9c321794e98
  frg44 :: Controller.TaskFrag
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Controller.TaskFrag
                   Main.starMan38
                   (GHC.Maybe.Nothing @ Controller.Millis)
                   (GHC.Maybe.Nothing @ Controller.Millis)
                   Main.frg40) -}
baadbfa1fd862773b5b20a72a3034e20
  frg45 :: [Controller.TaskFrag]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Controller.TaskFrag
                   Main.frg48
                   Main.frg46) -}
8f6ef6a74a9fd5efa368088ebc760eed
  frg46 :: [Controller.TaskFrag]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Controller.TaskFrag
                   Main.frg47
                   (GHC.Types.[] @ Controller.TaskFrag)) -}
18a7913429110e002ca87586fe6e7e16
  frg47 :: Controller.TaskFrag
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Controller.TaskFrag
                   Main.frg14
                   (GHC.Maybe.Nothing @ Controller.Millis)
                   Main.frg12
                   Main.frg24) -}
697c60a56624a6ead544f9e10d578bb7
  frg48 :: Controller.TaskFrag
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Controller.TaskFrag
                   Main.frg16
                   (GHC.Maybe.Nothing @ Controller.Millis)
                   Main.frg12
                   Main.frg27) -}
e4f8b71d3972c8ab306769520ed1bdbf
  frg7 :: [Controller.TaskFrag]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Controller.TaskFrag
                   Main.frg15
                   Main.frg8) -}
dd7737ca49658fd1f3c30322b59587e1
  frg8 :: [Controller.TaskFrag]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Controller.TaskFrag
                   Main.frg9
                   (GHC.Types.[] @ Controller.TaskFrag)) -}
60135aa2546f53ea06dfcf13a90a1f71
  frg9 :: Controller.TaskFrag
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Controller.TaskFrag
                   Main.frg14
                   (GHC.Maybe.Nothing @ Controller.Millis)
                   Main.frg12
                   Main.frg10) -}
7267d537b0b1cd31dee8acbf76e1d0e8
  grandDeadlineTest ::
    [Controller.TaskFrag] -> Test.Tasty.Core.TestTree
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (path :: [Controller.TaskFrag]) ->
                 Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   Main.grandDeadlineTest2
                   (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case Controller.grandDeadline_go path of wild {
                      []
                      -> case Controller.$smaximum1
                         ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                         of {}
                      : ipv ipv1
                      -> case Controller.$smaximum_go ipv1 ipv of wild1 {
                           GHC.Maybe.Nothing
                           -> case Main.grandDeadlineTest1
                                     s
                                     (GHC.Maybe.Nothing @ GHC.Types.Int)
                              ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                              of {}
                           GHC.Maybe.Just a1
                           -> case a1 of wild2 { GHC.Types.I# x ->
                              case x of wild3 {
                                DEFAULT
                                -> case Main.grandDeadlineTest1 s wild1
                                   ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                                   of {}
                                1# -> (# s, GHC.Types.[] @ GHC.Types.Char #) } } } })
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <[GHC.Types.Char]>_R) ; Sym (Test.Tasty.HUnit.N:TestCase[0]))) -}
e5f0fca8be994bce7ccbe1b1611cfb68
  grandDeadlineTest1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> GHC.Maybe.Maybe Controller.Millis
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <B,U><B,U>x -}
77c1c09aa498d3f8cc43e229f79daaee
  grandDeadlineTest2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Main.grandDeadlineTest3) -}
bf2a005a0ddb7391b52744f6d019b669
  grandDeadlineTest3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("grandDeadlineTest"#) -}
9bf266a62e9dc764e1193bc974f3ef01
  hoge :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   Main.hoge2
                   Main.hoge1
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <[GHC.Types.Char]>_R) ; Sym (Test.Tasty.HUnit.N:TestCase[0]))) -}
e41e8e7ce106cd3700f76981bf985270
  hoge1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# s, GHC.Types.[] @ GHC.Types.Char #)) -}
20361a87bcb99d650ea58198ce29a50a
  hoge2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.hoge3) -}
bd6e4dc3344fc2dbe3d4eab6b58bfa95
  hoge3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("fuga"#) -}
91a33b7d2b82c3307320e0b34c31dc1c
  main :: GHC.Types.IO ()
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
259532a50c1fe47096099018f4bc4345
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (Test.Tasty.CmdLine.defaultMainWithIngredients1
                   Test.Tasty.defaultIngredients
                   Main.allTests) -}
202e60bd9983bd8aa3d32c904bf60b0e
  main2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
60d345fab6486ad672d1654516a99af2
  pianoRollFTest :: GHC.Types.Int -> Test.Tasty.Core.TestTree
  {- Arity: 1, Strictness: <L,U(U)>,
     Unfolding: (\ (reso :: GHC.Types.Int) ->
                 Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   Main.pianoRollFTest11
                   (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    let {
                      w2 :: [(Controller.TaskFrag, [Controller.MillisDuration])]
                      = Controller.pianoRollF
                          Main.pianoRollFTest5
                          reso
                          Main.pianoRollFTest4
                          Main.starMan
                          (GHC.Types.[] @ (Controller.TaskFrag, [Controller.MillisDuration]))
                    } in
                    case GHC.Classes.$fEq[]_$c==
                           @ (Controller.TaskFrag, [Controller.MillisDuration])
                           Main.pianoRollFTest3
                           w2
                           (GHC.Types.[]
                              @ (Controller.TaskFrag, [Controller.MillisDuration])) of wild {
                      GHC.Types.False
                      -> case Main.pianoRollFTest1 s w2
                         ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                         of {}
                      GHC.Types.True -> (# s, GHC.Types.[] @ GHC.Types.Char #) })
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <[GHC.Types.Char]>_R) ; Sym (Test.Tasty.HUnit.N:TestCase[0]))) -}
b0689bdcc7cf90b3bb83fb3e82634da9
  pianoRollFTest1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> [(Controller.TaskFrag, [Controller.MillisDuration])]
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <B,U><B,U>x -}
f6b3b039d9781d8cd2e355bc770d4c93
  pianoRollFTest10 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.pianoRollFTest4, Main.starMan41)) -}
037df8acab9a39f5c9a34ca91ca68196
  pianoRollFTest11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.pianoRollFTest12) -}
0b0849040036924a1020899d76fee63b
  pianoRollFTest12 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("pianoRollF"#) -}
280720a1391ea00bad46167c0d8b8578
  pianoRollFTest13 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.Classes.$fEq[]_$c==
                        @ (Controller.TaskFrag, [Controller.MillisDuration])
                        Main.pianoRollFTest3
                        Main.pianoRollFTest2_w2
                        (GHC.Types.[]
                           @ (Controller.TaskFrag, [Controller.MillisDuration])) of wild {
                   GHC.Types.False
                   -> case Main.pianoRollFTest14 s
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                      of {}
                   GHC.Types.True -> (# s, GHC.Types.[] @ GHC.Types.Char #) }) -}
e7d0deeffbdaa8d616cc5544052e4d77
  pianoRollFTest14 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <B,U>x -}
ff3e098a186d2f0cfd6f40ec10b67187
  pianoRollFTest15 :: [Controller.MillisDuration]
  {- Unfolding: (Controller.stripedPattern Main.pianoRollFTest16) -}
12ac483ac88026e30994e12844838bd3
  pianoRollFTest16 :: [Controller.MillisDuration]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Controller.MillisDuration
                   Main.pianoRollFTest17
                   (GHC.Types.[] @ Controller.MillisDuration)) -}
748838fa8a42524df1b17e5934223134
  pianoRollFTest17 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.pianoRollFTest4, Main.frg28)) -}
b3877c5eb6731bda758665d685a47022
  pianoRollFTest18 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.pianoRollFTest19) -}
308f3728aae9c54bc5a6961c552b7ac3
  pianoRollFTest19 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("pianoRollF2"#) -}
463b7e242cd9b30f7b783940a5c55c2c
  pianoRollFTest2 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   Main.pianoRollFTest18
                   Main.pianoRollFTest13
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <[GHC.Types.Char]>_R) ; Sym (Test.Tasty.HUnit.N:TestCase[0]))) -}
64f7fe7f1c295024882bd8252a84ec43
  pianoRollFTest2_w2 ::
    [(Controller.TaskFrag, [Controller.MillisDuration])]
  {- Unfolding: (Controller.pianoRollF
                   Main.pianoRollFTest15
                   Main.footL2
                   Main.pianoRollFTest4
                   Main.starMan
                   (GHC.Types.[]
                      @ (Controller.TaskFrag, [Controller.MillisDuration]))) -}
92fe86ef2aaf88d1c644f9ad5157ebc6
  pianoRollFTest3 ::
    GHC.Classes.Eq (Controller.TaskFrag, [Controller.MillisDuration])
  {- Unfolding: (GHC.Classes.$fEq(,)
                   @ Controller.TaskFrag
                   @ [Controller.MillisDuration]
                   Controller.$fEqTaskFrag
                   Main.$s$fEq[]1) -}
202a9b8d548a785c8c8888f31e07e694
  pianoRollFTest4 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
b3ebf0c565fb91de8c5be9f9aa876bef
  pianoRollFTest5 :: [Controller.MillisDuration]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Controller.MillisDuration
                   Main.pianoRollFTest10
                   Main.pianoRollFTest6) -}
911f7c73ae809e4fe792921e212fb2c9
  pianoRollFTest6 :: [Controller.MillisDuration]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Controller.MillisDuration
                   Main.pianoRollFTest7
                   (GHC.Types.[] @ Controller.MillisDuration)) -}
3de2694d59808154958093f147a70b70
  pianoRollFTest7 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.pianoRollFTest9, Main.pianoRollFTest8)) -}
70c126a80e9630863b080b86ff2d92f5
  pianoRollFTest8 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 3000#) -}
08f474f825c89aeeaacf41713662a9e6
  pianoRollFTest9 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 2000#) -}
a77e9cb7b3193455914102cd6f14fdf2
  routeFindFTest :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   Main.routeFindFTest3
                   Main.routeFindFTest1
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <[GHC.Types.Char]>_R) ; Sym (Test.Tasty.HUnit.N:TestCase[0]))) -}
4d6c3e2cee203a47006f90b0e0c6a5a0
  routeFindFTest1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Controller.$wrouteFindF
                        Main.starMan
                        Main.footL of ww { (#,#) ww1 ww2 ->
                 let {
                   w2 :: [[Controller.TaskFrag]]
                   = GHC.Types.: @ [Controller.TaskFrag] ww1 ww2
                 } in
                 case GHC.Classes.$fEq[]_$c==
                        @ [Controller.TaskFrag]
                        Main.$s$fEq[]
                        w2
                        Main.routeFromFootL of wild {
                   GHC.Types.False
                   -> case Main.routeFindFTest2 s w2
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                      of {}
                   GHC.Types.True -> (# s, GHC.Types.[] @ GHC.Types.Char #) } }) -}
619767691cb3c256256c3cb2d1ab32ae
  routeFindFTest2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> [[Controller.TaskFrag]]
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <B,U><B,U>x -}
693cbe77569784120855f18827135723
  routeFindFTest3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.routeFindFTest4) -}
26ce5776ef85ff907db93458a9a643cf
  routeFindFTest4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("routeFindFTest"#) -}
5a332119bf49df367f054c2714fedf9d
  routeFromFootL :: [[Controller.TaskFrag]]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [Controller.TaskFrag]
                   Main.routeFromFootL5
                   Main.routeFromFootL1) -}
f67d72fe6420ac700b6302723391d63f
  routeFromFootL1 :: [[Controller.TaskFrag]]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [Controller.TaskFrag]
                   Main.routeFromFootL2
                   (GHC.Types.[] @ [Controller.TaskFrag])) -}
29bbf3c278f086b7e57e775644216ffe
  routeFromFootL2 :: [Controller.TaskFrag]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Controller.TaskFrag
                   Main.footL
                   Main.routeFromFootL3) -}
12c5d7a9713c9b31701a34413ceeb62d
  routeFromFootL3 :: [Controller.TaskFrag]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Controller.TaskFrag
                   Main.starMan35
                   Main.routeFromFootL4) -}
4d30127099c070b73255e41dbdf5487a
  routeFromFootL4 :: [Controller.TaskFrag]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Controller.TaskFrag
                   Main.starMan39
                   (GHC.Types.[] @ Controller.TaskFrag)) -}
1c97a2cccd0dc04f04e1f9bf150a8cd6
  routeFromFootL5 :: [Controller.TaskFrag]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Controller.TaskFrag
                   Main.footL
                   Main.routeFromFootL6) -}
af664d95f6055a1af38a8c1de1fb04d5
  routeFromFootL6 :: [Controller.TaskFrag]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Controller.TaskFrag
                   Main.starMan16
                   Main.routeFromFootL7) -}
ffecad7a4c9c8208ac662f45a0783491
  routeFromFootL7 :: [Controller.TaskFrag]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Controller.TaskFrag
                   Main.starMan30
                   Main.routeFromFootL4) -}
e800b4a029e4ff43973fc15a86393271
  starMan :: [Controller.TaskFrag]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Controller.TaskFrag
                   Main.starMan39
                   Main.starMan1) -}
571c2a9e098daf6fd135385bfbc7cfda
  starMan1 :: [Controller.TaskFrag]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Controller.TaskFrag
                   Main.starMan37
                   Main.starMan2) -}
93158dcddd9225e24f6f8df88f66d995
  starMan10 :: [Controller.TaskFrag]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Controller.TaskFrag
                   Main.starMan16
                   Main.starMan11) -}
629e417f8c96a7b095e43f64e0ead6c9
  starMan11 :: [Controller.TaskFrag]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Controller.TaskFrag
                   Main.starMan12
                   (GHC.Types.[] @ Controller.TaskFrag)) -}
2cb17649cfbcdb6a64677f0291464ff5
  starMan12 :: Controller.TaskFrag
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Controller.TaskFrag
                   Main.starMan13
                   (GHC.Maybe.Nothing @ Controller.Millis)
                   (GHC.Maybe.Nothing @ Controller.Millis)
                   Main.footL1) -}
e08b997957d70282a7a2c2bd6893c87c
  starMan13 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.starMan15, Main.starMan14)) -}
a429d9c4c60483f78149634751f8b61c
  starMan14 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 10#) -}
f4d407e1c615574c01a37b6aac091e53
  starMan15 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 6#) -}
643dbf175070dc0bf4fa2bedd3b5c738
  starMan16 :: Controller.TaskFrag
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Controller.TaskFrag
                   Main.starMan17
                   (GHC.Maybe.Nothing @ Controller.Millis)
                   (GHC.Maybe.Nothing @ Controller.Millis)
                   Main.footL1) -}
3b139f4dca01f2bd494d3a5954f4191a
  starMan17 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.starMan15, Main.footL5)) -}
a89ca89c0bce51fe035343a13646b5c9
  starMan18 :: Controller.TaskFrag
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Controller.TaskFrag
                   Main.starMan19
                   (GHC.Maybe.Nothing @ Controller.Millis)
                   (GHC.Maybe.Nothing @ Controller.Millis)
                   Main.footL1) -}
37687f032cdc73ef1f06ee677853f590
  starMan19 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.starMan15, Main.starMan20)) -}
04bee3640835a1557c4f840bae3ceefe
  starMan2 :: [Controller.TaskFrag]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Controller.TaskFrag
                   Main.starMan35
                   Main.starMan3) -}
9703025c697a362276d181eafd2f7ceb
  starMan20 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 3#) -}
0e7b5608e1f70d5d63a614f813424ee3
  starMan21 :: Controller.TaskFrag
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Controller.TaskFrag
                   Main.starMan22
                   (GHC.Maybe.Nothing @ Controller.Millis)
                   (GHC.Maybe.Nothing @ Controller.Millis)
                   Main.footL1) -}
e945cf2ef43a7db26291d6240ea2651f
  starMan22 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.starMan24, Main.starMan23)) -}
0d37fd0ebd93f3aed5385c08929e4068
  starMan23 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 9#) -}
21d68b6a4a1a23932a5ec6d50a8a959a
  starMan24 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 5#) -}
b1542d37ce3b3d97547b992b79d0ccbe
  starMan25 :: Controller.TaskFrag
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Controller.TaskFrag
                   Main.starMan26
                   (GHC.Maybe.Nothing @ Controller.Millis)
                   (GHC.Maybe.Nothing @ Controller.Millis)
                   Main.footL1) -}
23b0b40359cda0e91aa289df6d2d2117
  starMan26 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.starMan20, Main.starMan24)) -}
6821dab463b94ff66ec4e8c6a9f12517
  starMan27 :: Controller.TaskFrag
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Controller.TaskFrag
                   Main.starMan28
                   (GHC.Maybe.Nothing @ Controller.Millis)
                   (GHC.Maybe.Nothing @ Controller.Millis)
                   Main.footL1) -}
cb64ab3465bad36c70accbc45aa23bdd
  starMan28 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.starMan20, Main.starMan29)) -}
02f2764344cda5689be1a38d5141f573
  starMan29 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 7#) -}
7f860070cd5cfeac664ccccabb8df189
  starMan3 :: [Controller.TaskFrag]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Controller.TaskFrag
                   Main.starMan33
                   Main.starMan4) -}
0a4e3feb39b7bc897e3026e5804d4953
  starMan30 :: Controller.TaskFrag
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Controller.TaskFrag
                   Main.starMan31
                   (GHC.Maybe.Nothing @ Controller.Millis)
                   (GHC.Maybe.Nothing @ Controller.Millis)
                   Main.footL1) -}
dbd93561cabd920796622bf7e542eddb
  starMan31 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.starMan32, Main.starMan15)) -}
336ac29e1f5f9ff299f2d607b8897be1
  starMan32 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 2#) -}
3dab56341e368c4ccc1cfe3c04b69911
  starMan33 :: Controller.TaskFrag
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Controller.TaskFrag
                   Main.starMan34
                   (GHC.Maybe.Nothing @ Controller.Millis)
                   (GHC.Maybe.Nothing @ Controller.Millis)
                   Main.footL1) -}
37cc823b002de430e43f669218aa2ede
  starMan34 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.starMan32, Main.starMan24)) -}
198421340f124170ef0307a790d86c95
  starMan35 :: Controller.TaskFrag
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Controller.TaskFrag
                   Main.starMan36
                   (GHC.Maybe.Nothing @ Controller.Millis)
                   (GHC.Maybe.Nothing @ Controller.Millis)
                   Main.footL1) -}
b6a27312a3cf993084743a53e853f440
  starMan36 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.starMan32, Main.footL5)) -}
1789385652e4aa38a05fbf0430759498
  starMan37 :: Controller.TaskFrag
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Controller.TaskFrag
                   Main.starMan38
                   (GHC.Maybe.Nothing @ Controller.Millis)
                   (GHC.Maybe.Nothing @ Controller.Millis)
                   Main.footL1) -}
5ee3c8b38356888e81844bfa072662ff
  starMan38 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.starMan32, Main.starMan20)) -}
472ac2c3554f8dcfcaee29b383073dd3
  starMan39 :: Controller.TaskFrag
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Controller.TaskFrag
                   Main.starMan42
                   (GHC.Maybe.Nothing @ Controller.Millis)
                   Main.starMan40
                   Main.footL1) -}
9b2fea732422c3ae2217c44f2711eac9
  starMan4 :: [Controller.TaskFrag]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Controller.TaskFrag
                   Main.starMan30
                   Main.starMan5) -}
df27b422488d454b93f9abc27413075c
  starMan40 :: GHC.Maybe.Maybe Controller.Millis
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Maybe.Just @ Controller.Millis Main.starMan41) -}
37f75352a4108fcd8a435a5ffdbec5d7
  starMan41 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1000#) -}
f293ad4fe824fa0457c7cc428d9d5da0
  starMan42 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.starMan43, Main.starMan32)) -}
19e2fe0d3577e90d62fbf3016851f2c0
  starMan43 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
20a760bba8fea05acc295930e10aaf34
  starMan5 :: [Controller.TaskFrag]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Controller.TaskFrag
                   Main.starMan27
                   Main.starMan6) -}
a105845fe48729fb3e396a9e5095c278
  starMan6 :: [Controller.TaskFrag]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Controller.TaskFrag
                   Main.starMan25
                   Main.starMan7) -}
02d5557a152d30f57aab54773725c09e
  starMan7 :: [Controller.TaskFrag]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Controller.TaskFrag
                   Main.footL
                   Main.starMan8) -}
e2b7c85ba0f2090cdc903c0a51c87052
  starMan8 :: [Controller.TaskFrag]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Controller.TaskFrag
                   Main.starMan21
                   Main.starMan9) -}
3b29a45efc20f2c73374b0d8437d1473
  starMan9 :: [Controller.TaskFrag]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Controller.TaskFrag
                   Main.starMan18
                   Main.starMan10) -}
755b91e29737811d88de5a1a950c558b
  successorTest :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   Main.successorTest3
                   Main.successorTest1
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <[GHC.Types.Char]>_R) ; Sym (Test.Tasty.HUnit.N:TestCase[0]))) -}
5b53ce8c3a9682f78a89570d1d6cfca1
  successorTest1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.Classes.$fEq[]_$c==
                        @ Controller.TaskFrag
                        Controller.$fEqTaskFrag
                        Main.successorTest_w2
                        (GHC.Types.[] @ Controller.TaskFrag) of wild {
                   GHC.Types.False
                   -> case Main.successorTest2 s
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                      of {}
                   GHC.Types.True -> (# s, GHC.Types.[] @ GHC.Types.Char #) }) -}
bba4ea9fadfe2d2fcf798c4f936e3b38
  successorTest2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <B,U>x -}
1ce4882c5fb888b12dc954c4654112de
  successorTest3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.successorTest4) -}
4d22aeec626bebdc11f23488f4ac0c7e
  successorTest4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("successorTest"#) -}
680c21abc2964605b61a595e23e47cd4
  successorTest_w2 :: [Controller.TaskFrag]
  {- Unfolding: (Controller.successor Main.starMan Main.footL) -}
d29ee4cdd59da1f9645017150905dbed
  totalWeightTest ::
    [Controller.TaskFrag] -> Test.Tasty.Core.TestTree
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (path :: [Controller.TaskFrag]) ->
                 Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   Main.totalWeightTest2
                   (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    let {
                      exit :: GHC.Prim.Int#
                              -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                        <join 1> {- Arity: 1, Strictness: <S,1*U> -}
                      = \ (ww :: GHC.Prim.Int#)[OneShot] ->
                        case ww of wild {
                          DEFAULT
                          -> case Main.totalWeightTest1 s (GHC.Types.I# wild)
                             ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                             of {}
                          0# -> (# s, GHC.Types.[] @ GHC.Types.Char #) }
                    } in
                    letrec {
                      $wgo1 :: [Controller.TaskFrag]
                               -> GHC.Prim.Int#
                               -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                        <join 2> {- Arity: 2, Strictness: <S,1*U><S,U>, Inline: [2] -}
                      = \ (w2 :: [Controller.TaskFrag]) (ww :: GHC.Prim.Int#) ->
                        case w2 of wild {
                          [] -> exit ww
                          : y ys
                          -> case y of wild1 { Controller.TaskFrag ds1 ds2 ds3 ds4 ->
                             case ds4 of wild2 {
                               GHC.Maybe.Nothing -> $wgo1 ys ww
                               GHC.Maybe.Just w3
                               -> case w3 of wild3 { GHC.Types.I# y1 ->
                                  $wgo1 ys (GHC.Prim.+# ww y1) } } } }
                    } in
                    $wgo1 path 0#)
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <[GHC.Types.Char]>_R) ; Sym (Test.Tasty.HUnit.N:TestCase[0]))) -}
fbe3a795b0c75cece42cd7c3a45b2bf0
  totalWeightTest1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> GHC.Types.Int -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <B,U><B,U>x -}
dd3679339a2a0144dccd7bce97d65b9f
  totalWeightTest2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.totalWeightTest3) -}
48c64604ab3ad8ca50f1e668a74f2ab4
  totalWeightTest3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("totalWeightTest"#) -}
b29228e06c46c1e897503cbdc8b4dca0
  urgencyByPathFTest ::
    Controller.Millis
    -> [Controller.TaskFrag] -> Test.Tasty.Core.TestTree
  {- Arity: 2, Strictness: <L,U(U)><L,U>,
     Unfolding: (\ (cursor :: Controller.Millis)
                   (path :: [Controller.TaskFrag]) ->
                 Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   Main.urgencyByPathFTest2
                   (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case Controller.urgencyByPathF cursor path of wild {
                      GHC.Maybe.Nothing -> (# s, GHC.Types.[] @ GHC.Types.Char #)
                      GHC.Maybe.Just a1
                      -> case Main.urgencyByPathFTest1 s wild
                         ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                         of {} })
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <[GHC.Types.Char]>_R) ; Sym (Test.Tasty.HUnit.N:TestCase[0]))) -}
cc7c035b06989376dac1f8894a991cf2
  urgencyByPathFTest1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> GHC.Maybe.Maybe GHC.Types.Int
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <B,U><B,U>x -}
5044ac657cfb6b9b58bc353afd8f08d8
  urgencyByPathFTest2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Main.urgencyByPathFTest3) -}
b25d97c4ffede38c0d3537a47d3d98f7
  urgencyByPathFTest3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("urgencyPathTest"#) -}
e4c2fa0314d162579830c8c90464f885
  urgencyFTest ::
    Controller.Millis
    -> [Controller.TaskFrag]
    -> Controller.TaskFrag
    -> Test.Tasty.Core.TestTree
  {- Arity: 3, Strictness: <L,U(U)><L,U><L,U(U(U(U),U),U,U,U)>,
     Unfolding: (\ (cursor :: Controller.Millis)
                   (frags :: [Controller.TaskFrag])
                   (f :: Controller.TaskFrag) ->
                 Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   Main.urgencyFTest2
                   (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case Controller.urgencyF cursor frags f of wild {
                      GHC.Maybe.Nothing -> (# s, GHC.Types.[] @ GHC.Types.Char #)
                      GHC.Maybe.Just a1
                      -> case Main.urgencyFTest1 s wild
                         ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                         of {} })
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <[GHC.Types.Char]>_R) ; Sym (Test.Tasty.HUnit.N:TestCase[0]))) -}
bc2cd9c14f36ce1a7a4f29ae9a94bd46
  urgencyFTest1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> GHC.Maybe.Maybe GHC.Types.Int
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <B,U><B,U>x -}
5a8bf4d7f10547e64677ea8f44592825
  urgencyFTest2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.urgencyFTest3) -}
769934467d37606dbaded9369c4b9362
  urgencyFTest3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("urgencyFTest"#) -}
1aab6f6c88878472b48a65208a3caf15
  winner ::
    Controller.Millis
    -> [Controller.TaskFrag]
    -> [Controller.TaskFrag]
    -> Controller.TaskFrag
  {- Arity: 3, Strictness: <L,U(U)><L,U><S,1*U>,
     Unfolding: (\ (cursor :: Controller.Millis)
                   (frags :: [Controller.TaskFrag])
                   (entry :: [Controller.TaskFrag]) ->
                 case entry of wild {
                   [] -> GHC.List.foldl2 @ Controller.TaskFrag
                   : x xs
                   -> letrec {
                        go :: [Controller.TaskFrag]
                              -> Controller.TaskFrag -> Controller.TaskFrag
                          <join 2> {- Arity: 2, Strictness: <S,1*U><L,U(U(U(U),U),U,U,U)> -}
                        = \ (ds :: [Controller.TaskFrag]) (eta :: Controller.TaskFrag) ->
                          case ds of wild1 {
                            [] -> eta
                            : y ys
                            -> go
                                 ys
                                 (case Controller.urgencyF cursor frags eta of wild2 {
                                    GHC.Maybe.Nothing
                                    -> case Controller.urgencyF cursor frags y of wild3 { DEFAULT ->
                                       y }
                                    GHC.Maybe.Just a2
                                    -> case Controller.urgencyF cursor frags y of wild3 {
                                         GHC.Maybe.Nothing -> eta
                                         GHC.Maybe.Just b1
                                         -> case a2 of wild4 { GHC.Types.I# x# ->
                                            case b1 of wild5 { GHC.Types.I# y# ->
                                            case GHC.Prim.<# x# y# of lwild {
                                              DEFAULT
                                              -> case GHC.Prim.==# x# y# of lwild1 {
                                                   DEFAULT -> eta 1# -> y }
                                              1# -> y } } } } }) }
                      } in
                      go xs x }) -}
a8fb8e57bbe6bf8f3c6d3a81dba623f7
  winnerTest ::
    Controller.Millis
    -> [Controller.TaskFrag]
    -> [Controller.TaskFrag]
    -> Test.Tasty.Core.TestTree
  {- Arity: 3, Strictness: <L,U(U)><L,U><L,U>,
     Unfolding: (\ (cursor :: Controller.Millis)
                   (frags :: [Controller.TaskFrag])
                   (entry :: [Controller.TaskFrag]) ->
                 Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   Main.winnerTest2
                   (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case Main.winner
                           cursor
                           frags
                           entry of ww { Controller.TaskFrag ww1 ww2 ww3 ww4 ->
                    case ww1 of ww5 { (,) ww6 ww7 ->
                    case ww6 of ww8 { GHC.Types.I# ww9 ->
                    case ww9 of wild {
                      DEFAULT
                      -> case Main.winnerTest1 s ww
                         ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                         of {}
                      3#
                      -> case ww7 of wild1 { GHC.Types.I# x ->
                         case x of wild2 {
                           DEFAULT
                           -> case Main.winnerTest1 s ww
                              ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                              of {}
                           4#
                           -> case ww2 of wild3 {
                                GHC.Maybe.Nothing
                                -> case ww3 of wild4 {
                                     GHC.Maybe.Nothing
                                     -> case Main.winnerTest1 s ww
                                        ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                  [GHC.Types.Char] #)
                                        of {}
                                     GHC.Maybe.Just a1
                                     -> case a1 of wild5 { GHC.Types.I# x1 ->
                                        case x1 of wild6 {
                                          DEFAULT
                                          -> case Main.winnerTest1 s ww
                                             ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                       [GHC.Types.Char] #)
                                             of {}
                                          600#
                                          -> case ww4 of wild7 {
                                               GHC.Maybe.Nothing
                                               -> case Main.winnerTest1 s ww
                                                  ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                            [GHC.Types.Char] #)
                                                  of {}
                                               GHC.Maybe.Just a2
                                               -> case a2 of wild8 { GHC.Types.I# x2 ->
                                                  case x2 of wild9 {
                                                    DEFAULT
                                                    -> case Main.winnerTest1 s ww
                                                       ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                 [GHC.Types.Char] #)
                                                       of {}
                                                    300#
                                                    -> (# s,
                                                          GHC.Types.[]
                                                            @ GHC.Types.Char #) } } } } } }
                                GHC.Maybe.Just a1
                                -> case Main.winnerTest1 s ww
                                   ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                                   of {} } } } } } } })
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <[GHC.Types.Char]>_R) ; Sym (Test.Tasty.HUnit.N:TestCase[0]))) -}
917c75f94489a570e96500d137665551
  winnerTest1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> Controller.TaskFrag
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <B,U><B,U>x -}
38be75bd6936b2badcbc330268c48603
  winnerTest2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.winnerTest3) -}
86645015fdf75bc2a8af082d08f076b1
  winnerTest3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("winnerTest"#) -}
"SPEC/Main $fEq(,) @ Int @ Int" [orphan] forall (v1 :: GHC.Classes.Eq
                                                         GHC.Types.Int)
                                                (v :: GHC.Classes.Eq GHC.Types.Int)
  GHC.Classes.$fEq(,) @ GHC.Types.Int @ GHC.Types.Int v v1
  = Main.$s$fEq(,)
"SPEC/Main $fEq(,)_$c/= @ Int @ Int" [orphan] forall ($dEq1 :: GHC.Classes.Eq
                                                                 GHC.Types.Int)
                                                     ($dEq :: GHC.Classes.Eq GHC.Types.Int)
  GHC.Classes.$fEq(,)_$c/= @ GHC.Types.Int @ GHC.Types.Int $dEq $dEq1
  = Main.$s$fEq(,)_$s$fEq(,)_$c/=
"SPEC/Main $fEq[] @ (Millis, Millis)" [orphan] forall (v :: GHC.Classes.Eq
                                                              (Controller.Millis,
                                                               Controller.Millis))
  GHC.Classes.$fEq[] @ (Controller.Millis, Controller.Millis) v
  = Main.$s$fEq[]1
"SPEC/Main $fEq[] @ TaskFrag" [orphan] forall (v :: GHC.Classes.Eq
                                                      Controller.TaskFrag)
  GHC.Classes.$fEq[] @ Controller.TaskFrag v = Main.$s$fEq[]
"SPEC/Main $fEq[]_$c/= @ (Millis, Millis)" [orphan] forall ($dEq :: GHC.Classes.Eq
                                                                      (Controller.Millis,
                                                                       Controller.Millis))
  GHC.Classes.$fEq[]_$c/= @ (Controller.Millis, Controller.Millis)
                          $dEq
  = Main.$s$fEq[]_$s$fEq[]_$c/=1
"SPEC/Main $fEq[]_$c/= @ TaskFrag" [orphan] forall ($dEq :: GHC.Classes.Eq
                                                              Controller.TaskFrag)
  GHC.Classes.$fEq[]_$c/= @ Controller.TaskFrag $dEq
  = Main.$s$fEq[]_$s$fEq[]_$c/=
trusted: none
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

