Avoided duplication of nodes; revised markUp func
2019-12-22 23:22:36

コンパイラが見逃し、実際にSprigしたら吐かれたエラー
Non-exhaustive patterns in function spanLink'
spanLink' :: [Edge] -> [Edge] -> Graph -> Graph
spanLink' [] _ g            = g
spanLink' (t:ts) [] g       = spanLink' ts g g
spanLink' ((p,at):ts) ((q,ah):hs) g   =
    if keyMatch at ah ah then
        spanLink' ((p,at):ts) hs (spanLink'' p q g)
    else
        spanLink' ((p,at):ts) hs g
2019-12-23 02:52:16

↑ なぜか直ってしまった
taskFromEdge' と aAttr の変更が関係している？
2019-12-23 14:35:37

`Non-exhaustive patterns` はコンパイル通ることがあるのですね、気をつけなければ
2019-12-23 14:39:12

返答：
GHCに -Werror と -Wall オプションを付ければエラーにすることができます。
stack build --pedantic はそのショートカットです。 
2019-12-23 15:34:16

以前Pythonで実装した、graphFromText（約120行）に相当する部分を振り返ると、約250行かけていた
しかも2回目以降の登録を考慮していなかったため、shiftNodesが抜けている
2019-12-23 15:42:19

-- TODO
Albert "E=mc^2"
<- Science Team "Prove some equation"
<- Pisces Dep. "Say something crazy"
<- Zodiac Inc. "Do something amazing"
2019-12-23 20:56:22

-- TODO
You do not have permission to edit BOSS tasks.
You do not have permission to view COMPANY tasks.
2019-12-24 00:33:03


User (pack "develop") True False 9 60 (pack "Hou") Nothing
2019-12-24 15:23:28

西暦3000年とかで日課（繰り返しのあるタスク）をシミュレートできる
同様に年課、四半期課、月課、週課、時課、分課もシミュレートできる
たとえば
「年末年始の恒例の動きを3100/12-3101/01にテンプレとして書いておき、毎年コピーして編集する」
    （dpyのショートカットキーと対応させる、たとえば日課なら3500年代を使うと覚えやすい）
「社員番号4桁に10000を加えた年を空想に使って良い」
といった使い方ができる
-- TODO
現状だとstartやdeadlineを設定していないリアルなタスクを下へ追いやってしまい邪魔...
シミュレートは別アカウントでやるべきか
「社員番号4桁に10000を加えたものをサブ垢にして良い」
2019-12-24 16:38:56

UPDATE public.user SET is_lazy = False;
UPDATE public.user SET is_lazy = True;
2019-12-28 23:01:19

barString works!
2019-12-29 11:25:35

added TextPost validation
got ready for implementing textFromTasks

#777 % * key] title... @satun [key &https://

mergeOnNodes [((1,2),4), ((2,3),6)] [((2,3), (Data.Text.pack "piyo")),((1,2), (Data.Text.pack "hoge"))]
mergeOnNodes [((1,2),4)] [((2,3), (Data.Text.pack "piyo")),((1,2), (Data.Text.pack "hoge"))]
mergeOnNodes [((1,2),4), ((2,3),6)] [((1,2), (Data.Text.pack "hoge"))]

Succeed in cloning tasks!
2019-12-31 06:03:52

asideDummy [((1,2),[]),((2,3),[IsDummy True]),((3,4),[])]
removed IsDummy field from Attr
removed char variable from IsDone and IsStarred
2019-12-31 06:18:10

Trimmed waste of input field when cloning

"x tasks archived/undone."
2019-12-31 14:29:16

スクロールの件

-- Main.elm

view model =
    div [ id "container" ]
        [ div [ id "header" ]
        , div [ id "body" ]
            [ div [ id "mainContainer" ]
                [ div [ id "mainHeader" ]
                , div [ id "mainBody" ]
                    [ viewTaskHeader model
                    , div [ id "tasks" ]
                        [...]
                    ]
                ]
            ]
        , div [ id "fotter" ] []
        ]

-- style.css

#container {
    height: 100%;
    display: flex;
    flex-direction: column;
}

#header {
    height: 64px;
}

#body {
    flex-grow: 1;
    display: flex;
}

#mainContainer {
    height: inherit;
    display: flex;
    flex-direction: column;
}

#mainHeader {
    height: 48px;
}

#mainBody {
    flex-grow: 1;
    display: flex;
    flex-direction: column;
}

#taskHeader {
    height: 56px;
}

#tasks {
    flex-grow: 1;
    overflow: auto;
}

#footer {
    height: 86px;
}


Gmailに似たビジュアルと操作感を目指してタスク管理ツールを作っているのですが
2点でつまづいています。

1.
画像のような構成で、やりたいことは
環境に合わせて全体としては画面ぴったりに表示させつつ
タスクの行たち(Gmailでいうメールの行たち）だけ縦スクロールさせたいです。
ところが現状 `#tasks` の `overflow: auto;` が利いておらず
画面外まで縦に伸びてしまいます。
`#container` の `height: 100%;` に帰着する問題かと思い試しにpxで指定しても同様でした。
`flex-grow` あたりに問題があるのかもしれませんが、
これを用いる他、柔軟に表示させる方法がちょっと分かりません。
あるいは、Elm側で実現する方法はありますでしょうか。

2.
1.の縦スクロールに関連して、Gmailのように
キーボードショートカットによる行フォーカスが画面外に行きそうになったとき
それに追従するようにスクロールさせたいです。
方法を調べているところですが、ヒントがありましたらご教示ください。
2019-12-31 17:11:49


:set -XOverloadedStrings
import Data.Attoparsec.Text
parse takeText "hey"
parse (takeTill (=='<')) "hey<foy"

17:30過ぎたら#が-になってしまった
2019-12-31 17:39:39

ignored seconds

selection independent of actually shown tasks

added task classes: .executable .overload

refactored elm-to-servant interface

implemented Archives/Trunk/Buds

implemented merging-insert!
implemented message-code!

Not applicable to diagrams with loops.
2020-01-02 00:50:34

defined Schedule entity and resolutionMin field

insDur (Duration (TimeOfDay 8 30 0) (TimeOfDay 12 0 0) (toSqlKey 1 :: UserId))
insDur (Duration (TimeOfDay 13 00 0) (TimeOfDay 17 30 0) (toSqlKey 1 :: UserId))

jump -2020/1/10 $10
    step $10
        hop 2020/1/6- $10

compile passed but RESCHEDULE does not work

midnight
1578096000000

starMan-首 $6 -2020/01/16
    starMan-左肩 [hoge $6
        ]piyo starMan-左手 $6
    starMan-左脚 $6
        ]fuga starMan-左足 $6 2020/01/06-
    starMan-右脚 $6
        ]hoge starMan-右足 $6
    starMan-右肩 [piyo [fuga $6
        starMan-右手 $6

scheduleForward implemented!

おかげさまで、1.については解決しました
結局、 `#tasks` に `flex-grow` と併せて
**十分小さな何らかの値をheightに指定する** ことでうまくいきました

議論のためには、styleつきhtmlを用意すれば良かったですね
作っていただいて、ありがとうございました
2020-01-04 23:31:11

revised css; scroll bar, font size, limit of textarea.
2020-01-05 05:01:31

]hoge triLoop -2020/01/06 $6
    oops [hoge $6

ALTER USER postgres WITH PASSWORD '';

<!DOCTYPE html>
<html>
<head>
</head>
<body>
    Hello World！
</body>
</html>

WARNING: '/home/vagrant/.local/bin' is not on your PATH.
    For best results, please add it to the beginning of PATH in your profile.  
2020-01-10 23:11:30

moved to ubuntu/bionic64 environment
2020-01-11 00:53:50

resetSchedules 1 [(Schedule ((read "2011-11-19 18:28:52.607875 UTC")::UTCTime) ((read "2011-11-19 18:58:52.607875 UTC")::UTCTime) (toSqlKey 12 :: TaskId))]

首 -2020/01/22 $3
    左肩 [key $3
    key] 右脚 2020/01/12- $3

starMan-首 $6 -2020/01/16
    starMan-左肩 [hoge $6
        piyo] starMan-左手 $6
    starMan-左脚 $6
        piyo] starMan-左足 $6 2020/01/06-
    starMan-右脚 $6
        hoge] starMan-右足 $6
    starMan-右肩 [piyo $6
        starMan-右手 $6

revised hasLoop
ordered by min_ ScheduleBegin

implemented following-scroll
2020-01-12 11:21:54

added hard-typing-mode to textarea
added asOfShift (w and o key)
2020-01-12 18:33:42

illustrate W and O
2020-01-12 18:47:21

implemented cascade done/undone.

Slash commands now implementing

added several /sel commands

feature/task-as-node

altered from task as edge to one as node
unified API response to ElmSubModel

passed compile

drop schema public cascade;
create schema public;

starMan-頭 $6 -2020/02/13
    starMan-首 $6
        c] starMan-左肩 [a $6
            starMan-左手 $6
        b] starMan-左膝 $6
            starMan-左足 $6 2020/02/06-
        a] starMan-右膝 $6
            starMan-右足 $6
        starMan-右肩 [b [c $6
            starMan-右手 $6

a] biLoop
    oops [a

a] triLoop
    uups
        oops [a

デバッグ
    速度

completed slash-sel command
