Avoided duplication of nodes; revised markUp func
2019-12-22 23:22:36

コンパイラが見逃し、実際にSprigしたら吐かれたエラー
Non-exhaustive patterns in function spanLink'
spanLink' :: [Edge] -> [Edge] -> Graph -> Graph
spanLink' [] _ g            = g
spanLink' (t:ts) [] g       = spanLink' ts g g
spanLink' ((p,at):ts) ((q,ah):hs) g   =
    if keyMatch at ah ah then
        spanLink' ((p,at):ts) hs (spanLink'' p q g)
    else
        spanLink' ((p,at):ts) hs g
2019-12-23 02:52:16

↑ なぜか直ってしまった
taskFromEdge' と aAttr の変更が関係している？
2019-12-23 14:35:37

`Non-exhaustive patterns` はコンパイル通ることがあるのですね、気をつけなければ
2019-12-23 14:39:12

返答：
GHCに -Werror と -Wall オプションを付ければエラーにすることができます。
stack build --pedantic はそのショートカットです。 
2019-12-23 15:34:16

以前Pythonで実装した、graphFromText（約120行）に相当する部分を振り返ると、約250行かけていた
しかも2回目以降の登録を考慮していなかったため、shiftNodesが抜けている
2019-12-23 15:42:19

-- TODO
Albert "E=mc^2"
<- Science Team "Prove some equation"
<- Pisces Dep. "Say something crazy"
<- Zodiac Inc. "Do something amazing"
2019-12-23 20:56:22

-- TODO
You do not have permission to edit BOSS tasks.
You do not have permission to view COMPANY tasks.
2019-12-24 00:33:03

insUser $ User (pack "develop") True 9 True (Just 730) Nothing Nothing Nothing
insUser $ User (pack "satun") True 9 True (Just 1460) Nothing Nothing Nothing
insUser $ User (pack "chiro") False 0 False (Just 2920) Nothing Nothing Nothing
2019-12-24 15:23:28

西暦3000年とかで日課（繰り返しのあるタスク）をシミュレートできる
同様に年課、四半期課、月課、週課、時課、分課もシミュレートできる
たとえば
「年末年始の恒例の動きを3100/12-3101/01にテンプレとして書いておき、毎年コピーして編集する」
    （dpyのショートカットキーと対応させる、たとえば日課なら3500年代を使うと覚えやすい）
「社員番号4桁に10000を加えた年を空想に使って良い」
といった使い方ができる
-- TODO
現状だとstartやdeadlineを設定していないリアルなタスクを下へ追いやってしまい邪魔...
シミュレートは別アカウントでやるべきか
「社員番号4桁に10000を加えたものをサブ垢にして良い」
2019-12-24 16:38:56

INSERT INTO duration VALUES (30600,43200,1);
INSERT INTO duration VALUES (46800,63000,1);

UPDATE public.user SET is_lazy = False;
UPDATE public.user SET is_lazy = True;
2019-12-28 23:01:19

barString works!
2019-12-29 11:25:35

added TextPost validation
got ready for implementing textFromTasks

#777 % * key] title... @satun [key &https://

mergeOnNodes [((1,2),4), ((2,3),6)] [((2,3), (Data.Text.pack "piyo")),((1,2), (Data.Text.pack "hoge"))]
mergeOnNodes [((1,2),4)] [((2,3), (Data.Text.pack "piyo")),((1,2), (Data.Text.pack "hoge"))]
mergeOnNodes [((1,2),4), ((2,3),6)] [((1,2), (Data.Text.pack "hoge"))]

Succeed in cloning tasks!
2019-12-31 06:03:52

asideDummy [((1,2),[]),((2,3),[IsDummy True]),((3,4),[])]
removed IsDummy field from Attr
removed char variable from IsDone and IsStarred
2019-12-31 06:18:10

Trimmed waste of input field when cloning

"x tasks archived/undone."
2019-12-31 14:29:16

スクロールの件

-- Main.elm

view model =
    div [ id "container" ]
        [ div [ id "header" ]
        , div [ id "body" ]
            [ div [ id "mainContainer" ]
                [ div [ id "mainHeader" ]
                , div [ id "mainBody" ]
                    [ viewTaskHeader model
                    , div [ id "tasks" ]
                        [...]
                    ]
                ]
            ]
        , div [ id "fotter" ] []
        ]

-- style.css

#container {
    height: 100%;
    display: flex;
    flex-direction: column;
}

#header {
    height: 64px;
}

#body {
    flex-grow: 1;
    display: flex;
}

#mainContainer {
    height: inherit;
    display: flex;
    flex-direction: column;
}

#mainHeader {
    height: 48px;
}

#mainBody {
    flex-grow: 1;
    display: flex;
    flex-direction: column;
}

#taskHeader {
    height: 56px;
}

#tasks {
    flex-grow: 1;
    overflow: auto;
}

#footer {
    height: 86px;
}


Gmailに似たビジュアルと操作感を目指してタスク管理ツールを作っているのですが
2点でつまづいています。

1.
画像のような構成で、やりたいことは
環境に合わせて全体としては画面ぴったりに表示させつつ
タスクの行たち(Gmailでいうメールの行たち）だけ縦スクロールさせたいです。
ところが現状 `#tasks` の `overflow: auto;` が利いておらず
画面外まで縦に伸びてしまいます。
`#container` の `height: 100%;` に帰着する問題かと思い試しにpxで指定しても同様でした。
`flex-grow` あたりに問題があるのかもしれませんが、
これを用いる他、柔軟に表示させる方法がちょっと分かりません。
あるいは、Elm側で実現する方法はありますでしょうか。

2.
1.の縦スクロールに関連して、Gmailのように
キーボードショートカットによる行フォーカスが画面外に行きそうになったとき
それに追従するようにスクロールさせたいです。
方法を調べているところですが、ヒントがありましたらご教示ください。
2019-12-31 17:11:49


:set -XOverloadedStrings
import Data.Attoparsec.Text
parse takeText "hey"
parse (takeTill (=='<')) "hey<foy"

17:30過ぎたら#が-になってしまった
2019-12-31 17:39:39

ignored seconds

selection independent of actually shown tasks

added task classes: .executable .overload

refactored elm-to-servant interface

implemented Archives/Trunk/Buds

implemented merging-insert!
implemented message-code!

Not applicable to diagrams with loops.
2020-01-02 00:50:34

